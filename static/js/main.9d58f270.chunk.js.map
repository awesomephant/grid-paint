{"version":3,"sources":["GridCell.js","Grid.js","App.js","serviceWorker.js","index.js"],"names":["GridCell","props","state","currentTile","handleClick","bind","e","preventDefault","this","setState","prevState","s","backgroundImage","style","onClick","className","React","Component","Grid","rows","columns","containers","i","top","push","left","gridStyle","display","gridTemplateColumns","gridTemplateRows","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SAoCeA,E,YAjCX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,YAAa,GAEjB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBALJ,E,yEAOPC,GAERA,EAAEC,iBACFC,KAAKC,UAAS,SAACC,GAKX,OAJAA,EAAUP,cACNO,EAAUP,YAJA,IAKVO,EAAUP,YAAc,GAErBO,O,+BAIX,IAAIC,EAAI,CACJC,gBAAgB,gBAAD,OAAkBJ,KAAKN,MAAMC,YAA7B,UAGnB,OACI,yBAAKU,MAAOF,EAAGG,QAASN,KAAKJ,YAAaW,UAAU,aAChD,0BAAMA,UAAU,sBACfP,KAAKN,MAAMC,kB,GA3BLa,IAAMC,WC0CdC,G,uLAjCP,IAJA,IAAIC,EAAO,GACPC,EAAU,GACVC,EAAa,GAERC,EAAI,EAAGA,EAAId,KAAKP,MAAMkB,KAAMG,IAAK,CACtC,IAAIX,EAAI,CAAEY,IAAI,GAAD,OAAM,IAAMf,KAAKP,MAAMkB,KAAQG,EAA/B,OACbH,EAAKK,KAAK,yBAAKX,MAAOF,EAAGI,UAAU,kBAEvC,IAAK,IAAIO,EAAI,EAAGA,EAAId,KAAKP,MAAMmB,QAASE,IAAK,CACzC,IAAIX,EAAI,CAAEc,KAAK,GAAD,OAAM,IAAMjB,KAAKP,MAAMmB,QAAWE,EAAlC,OACdF,EAAQI,KAAK,yBAAKX,MAAOF,EAAGI,UAAU,qBAG1C,IAAK,IAAIO,EAAI,EAAGA,EAAId,KAAKP,MAAMmB,QAAUZ,KAAKP,MAAMkB,KAAMG,IAEtDD,EAAWG,KAAK,kBAAC,EAAD,OAGpB,IAAME,EAAY,CACdC,QAAS,OACTC,oBAAoB,UAAD,OAAYpB,KAAKP,MAAMmB,QAAvB,SACnBS,iBAAiB,UAAD,OAAYrB,KAAKP,MAAMkB,KAAvB,UAEpB,OACI,oCACI,yBAAKJ,UAAU,aACVI,EACAC,GAEL,yBAAKL,UAAU,OAAOF,MAAOa,GACxBL,Q,GAjCFL,IAAMC,YCQVa,G,uLANX,OACE,kBAAC,EAAD,CAAMV,QAAQ,KAAKD,KAAK,W,GAHZH,IAAMC,YCQJc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9d58f270.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass GridCell extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentTile: 6\r\n        }\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n    handleClick(e) {\r\n        const tileCount = 6;\r\n        e.preventDefault();\r\n        this.setState((prevState) => {\r\n            prevState.currentTile++;\r\n            if (prevState.currentTile > tileCount) {\r\n                prevState.currentTile = 1;\r\n            }\r\n            return prevState\r\n        })\r\n    }\r\n    render() {\r\n        let s = {\r\n            backgroundImage: `url(./assets/${this.state.currentTile}.png)`\r\n//            backgroundImage: `url(./assets/test.jpg)`\r\n        }\r\n        return (\r\n            <div style={s} onClick={this.handleClick} className='grid-cell'>\r\n                <span className='grid-cell--counter'>\r\n                {this.state.currentTile}\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GridCell;","import React from 'react';\r\nimport GridCell from './GridCell.js'\r\nimport './Grid.css';\r\n\r\nclass Grid extends React.Component {\r\n    render() {\r\n\r\n        let rows = []\r\n        let columns = []\r\n        let containers = []\r\n\r\n        for (let i = 1; i < this.props.rows; i++) {\r\n            let s = { top: `${(100 / this.props.rows) * i}vh` }\r\n            rows.push(<div style={s} className='gridline-row'></div>)\r\n        }\r\n        for (let i = 1; i < this.props.columns; i++) {\r\n            let s = { left: `${(100 / this.props.columns) * i}vw` }\r\n            columns.push(<div style={s} className='gridline-column'></div>)\r\n        }\r\n\r\n        for (let i = 0; i < this.props.columns * this.props.rows; i++) {\r\n            //containers.push(<div style={s} className='grid-container'></div>)\r\n            containers.push(<GridCell></GridCell>)\r\n        }\r\n\r\n        const gridStyle = {\r\n            display: 'grid',\r\n            gridTemplateColumns: `repeat(${this.props.columns}, 1fr`,\r\n            gridTemplateRows: `repeat(${this.props.rows}, 1fr`,\r\n        }\r\n        return (\r\n            <>\r\n                <div className=\"gridlines\">\r\n                    {rows}\r\n                    {columns}\r\n                </div>\r\n                <div className='grid' style={gridStyle}>\r\n                    {containers}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Grid;","import React from 'react';\r\nimport Grid from './Grid.js';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <Grid columns='14' rows='16'></Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}